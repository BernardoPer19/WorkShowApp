generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categories {
  category_id String     @id @default(uuid()) @db.Uuid
  name        String     @db.VarChar
  projects    Projects[]
}

model Collection_projects {
  collection_projects_id String      @id @default(uuid()) @db.Uuid
  collection_id          String      @db.Uuid
  project_id             String      @db.Uuid
  collections            Collections @relation(fields: [collection_id], references: [collection_id], onDelete: NoAction, onUpdate: NoAction)
  projects               Projects    @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([collection_id, project_id]) // evita duplicados
}

model Collections {
  collection_id       String                @id @default(uuid()) @db.Uuid
  name_collection     String                @db.VarChar(50)
  description         String
  user_id             String                @db.Uuid
  createCollection_at DateTime              @default(now())
  collection_projects Collection_projects[]
  users               Users                 @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "llaveForanea")
}

model Commets {
  commet_id  String    @id(map: "likes_pkey") @default(uuid()) @db.Uuid
  content    String
  user_id    String    @db.Uuid
  project_id String    @db.Uuid
  created_at DateTime? @db.Timestamptz(6)
  projects   Projects  @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction)
  users      Users     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fkeyCommets")
}

model Follows {
  follewer_id                       String   @id @db.Uuid
  following_id                      String   @db.Uuid
  create_at                         DateTime @db.Timestamptz(6)
  users_follows_follewer_idTousers  Users    @relation("follows_follewer_idTousers", fields: [follewer_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "follower_id")
  users_follows_following_idTousers Users    @relation("follows_following_idTousers", fields: [following_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "following_id")
}

model Likes {
  user_id        String   @id(map: "likes_pkey1") @db.Uuid
  project_id     String   @db.Uuid
  createdLike_at DateTime @db.Timestamptz(6)
  projects       Projects @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction)
  users          Users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model Project_media {
  media_id   String   @id @map("media:id") @db.Uuid
  project_id String   @db.Uuid
  type       String   @db.VarChar(50)
  url        String   @db.VarChar(200)
  order      Int
  projects   Projects @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction)
}

model Projects {
  project_id          String                @id @default(uuid()) @db.Uuid
  title               String                @db.VarChar(50)
  description         String                @db.VarChar(250)
  user_id             String                @db.Uuid
  category_id         String                @db.Uuid
  demo_url            String                @db.VarChar(200)
  createProject_at    DateTime              @default(now()) @db.Timetz(6)
  collection_projects Collection_projects[]
  commets             Commets[]
  likes               Likes[]
  project_media       Project_media[]
  categories          Categories            @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)
  users               Users                 @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  ProjectTecnology    ProjectTecnology[]
}

model Tecnologies {
  tecnology_id    String             @id @default(uuid()) @db.Uuid
  name            String             @unique @db.VarChar(50)
  projects        ProjectTecnology[]
  userTecnologies UserTecnology[]
}

model ProjectTecnology {
  project_id   String @db.Uuid
  tecnology_id String @db.Uuid

  project   Projects    @relation(fields: [project_id], references: [project_id])
  tecnology Tecnologies @relation(fields: [tecnology_id], references: [tecnology_id])

  @@id([project_id, tecnology_id])
}

model UserTecnology {
  user_id      String @db.Uuid
  tecnology_id String @db.Uuid

  user      Users       @relation(fields: [user_id], references: [user_id])
  tecnology Tecnologies @relation(fields: [tecnology_id], references: [tecnology_id])

  @@id([user_id, tecnology_id])
}

model Users {
  user_id        String   @id @default(uuid()) @db.Uuid
  name           String   @db.VarChar(50) // añadido
  lastname       String   @db.VarChar(50) // añadido
  username       String   @db.VarChar(50)
  email          String   @db.VarChar(50)
  password       String   @db.VarChar(100)
  bio            String?  @default("") @db.VarChar(300)
  avatar_url     String?  @default("") @db.VarChar(200)
  portafolio_url String?  @default("") @db.VarChar(200)
  profession     String?  @db.VarChar(30)
  toolSkills     String[] // añadido como array simple
  created_at     DateTime @default(now()) @db.Timestamptz(6)

  // Relaciones
  collections                         Collections[]
  commets                             Commets[]
  follows_follows_follewer_idTousers  Follows?        @relation("follows_follewer_idTousers")
  follows_follows_following_idTousers Follows[]       @relation("follows_following_idTousers")
  likes                               Likes?
  projects                            Projects[]
  UserTecnology                       UserTecnology[]
}
