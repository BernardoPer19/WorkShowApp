generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  id   Bytes   @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  name String? @unique(map: "name") @db.VarChar(255)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model collection_projects {
  collection_id Bytes @db.Binary(16)
  project_id    Bytes @db.Binary(16)

  @@id([collection_id, project_id])
  @@index([project_id], map: "project_id")
}

model collections {
  id          Bytes     @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  name        String?   @db.VarChar(255)
  description String?   @db.Text
  user_id     Bytes?    @db.Binary(16)
  created_at  DateTime? @default(now()) @db.Timestamp(0)

  @@index([user_id], map: "user_id")
}

model comments {
  id         Bytes     @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  content    String?   @db.Text
  user_id    Bytes?    @db.Binary(16)
  project_id Bytes?    @db.Binary(16)
  created_at DateTime? @default(now()) @db.Timestamp(0)

  @@index([project_id], map: "project_id")
  @@index([user_id], map: "user_id")
}

model follows {
  follower_id  Bytes     @db.Binary(16)
  following_id Bytes     @db.Binary(16)
  created_at   DateTime? @default(now()) @db.Timestamp(0)

  @@id([follower_id, following_id])
  @@index([following_id], map: "following_id")
}

model likes {
  user_id    Bytes     @db.Binary(16)
  project_id Bytes     @db.Binary(16)
  created_at DateTime? @default(now()) @db.Timestamp(0)

  @@id([user_id, project_id])
  @@index([project_id], map: "project_id")
}

model project_media {
  id         Bytes   @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  project_id Bytes?  @db.Binary(16)
  type       String? @db.VarChar(255)
  url        String? @db.VarChar(255)
  order      Int?

  @@index([project_id], map: "project_id")
}

model projects {
  id          Bytes     @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  title       String?   @db.VarChar(255)
  description String?   @db.Text
  user_id     Bytes?    @db.Binary(16)
  category_id Bytes?    @db.Binary(16)
  demo_url    String?   @db.VarChar(255)
  created_at  DateTime? @default(now()) @db.Timestamp(0)

  @@index([category_id], map: "category_id")
  @@index([user_id], map: "user_id")
}

model users {
  user_id       Bytes     @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  username      String?   @db.VarChar(255)
  email         String?   @unique(map: "email") @db.VarChar(255)
  password      String?   @db.VarChar(255)
  bio           String?   @db.Text
  avatar_url    String?   @db.VarChar(255)
  profession    String?   @db.VarChar(255)
  portfolio_url String?   @db.VarChar(255)
  created_at    DateTime? @default(now()) @db.Timestamp(0)
}
